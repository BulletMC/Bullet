package com.aznos

import com.aznos.generators.DamageTypeGenerator
import com.aznos.generators.DimensionTypeGenerator
import com.aznos.generators.PaintingVariantGenerator
import com.aznos.generators.WolfVariantGenerator
import com.google.gson.GsonBuilder
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.net.URI
import java.nio.channels.Channels
import java.util.logging.Logger
import java.util.zip.ZipInputStream

object Main {

    const val VERSION = "1.21.4"
    private const val DOWNLOAD_DATA = false

    val logger = Logger.getLogger("Bullet Code Generator")
    val gson = GsonBuilder().disableHtmlEscaping().create()

    val buildFolder = File("code-generators/build/")
    val assetsFolder = buildFolder.resolve("minecraft-assets-$VERSION")
    val dataFolder = buildFolder.resolve("minecraft-data-master")
    val outputFolder = File("src/autogenerated/java/")

    init {
        if (DOWNLOAD_DATA) {
            if (buildFolder.exists()) buildFolder.deleteRecursively()
            buildFolder.mkdirs()

            logger.info("Downloading data...")
            val assetsZip = downloadFile("https://github.com/InventivetalentDev/minecraft-assets/archive/refs/heads/$VERSION.zip")
            val dataZip = downloadFile("https://github.com/PrismarineJS/minecraft-data/archive/refs/heads/master.zip")

            logger.info("Extracting data...")
            extractMinecraftDataZip(assetsZip, buildFolder)
            extractMinecraftDataZip(dataZip, buildFolder)
        } else {
            logger.warning("Skipped downloading data because DOWNLOAD_DATA is set in code-generators/src/main/kotlin/com/aznos/Main.kt (for development purposes)")

            if (!dataFolder.resolve("data/dataPaths.json").exists()) {
                throw RuntimeException("Cannot skip downloading data, because no data exists!")
            }
        }

        logger.info("Generating...")
        DamageTypeGenerator().generate()
        DimensionTypeGenerator().generate()
        WolfVariantGenerator().generate()
        PaintingVariantGenerator().generate()
    }

    fun initialize() {}

    private fun downloadFile(url: String): File {
        val zipFile = File.createTempFile("download", ".zip")

        val channel = Channels.newChannel(URI(url).toURL().openStream())
        val outputStream = FileOutputStream(zipFile)
        outputStream.channel.transferFrom(channel, 0, Long.MAX_VALUE)
        outputStream.close()
        channel.close()

        return zipFile
    }

    private fun extractMinecraftDataZip(zipFile: File, outputFolder: File) {
        val zis = ZipInputStream(FileInputStream(zipFile))

        var entry = zis.nextEntry
        val buffer = ByteArray(1024)

        while (entry != null) {
            val file = outputFolder.resolve(entry.name)

            if (entry.isDirectory) {
                file.mkdirs()
            } else {
                file.parentFile.mkdirs()
                file.createNewFile()

                val outputStream = FileOutputStream(file)
                var len: Int
                while ((zis.read(buffer).also { len = it }) > 0) {
                    outputStream.write(buffer, 0, len)
                }
            }

            zis.closeEntry()
            entry = zis.nextEntry
        }
    }

}

fun main() = Main.initialize()